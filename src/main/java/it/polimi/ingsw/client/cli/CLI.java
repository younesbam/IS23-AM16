package it.polimi.ingsw.client.cli;

import it.polimi.ingsw.client.*;
import it.polimi.ingsw.client.common.Client;
import it.polimi.ingsw.client.common.UI;
import it.polimi.ingsw.common.ConnectionType;
import it.polimi.ingsw.communications.serveranswers.ConnectionOutcome;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeSupport;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Scanner;
import java.util.logging.Level;

import static it.polimi.ingsw.Const.BLUE_BOLD_COLOR;
import static it.polimi.ingsw.Const.RESET_COLOR;

public class CLI extends UI implements Runnable{
    /**
     * Input scanner.
     */
    private final Scanner input;



    /**
     * CLI constructor.
     */
    public CLI() {
        this.pcsDispatcher = new PropertyChangeSupport(this);
        this.input = new Scanner(System.in);
        this.modelView = new ModelView(this);
        this.actionHandler = new ActionHandler(this, this.modelView);
        setActiveGame(true);
    }


    /**
     * This is the main class of the client using CLI.
     * @param args
     */
    public static void main(String[] args) {
        CLI cli = new CLI();
        cli.run();
    }


    @Override
    public void run() {
        // TODO: bisogna gestire questo bit di activeGame. Va messo a FALSE da qualcuno che sa quando il gioco Ã¨ finito
        connect();

        while(isActiveGame()){
            loop();
        }

        /*
        Disconnect from server when the game is ended.
         */
        disconnectFromServer();
    }


    /**
     * Loop the CLI waiting for new ACTION command
     */
    private void loop(){
        //System.out.println("SONO NEL LOOOOOOOOPPPPPPP");
        input.reset();
        pcsDispatcher.firePropertyChange("action", null, input.nextLine());
    }


    /**
     * Ask player's username.
     * @return player's username
     */
    private String askUsername(){
        String username = null;
        boolean nameChosen = false;
        while (!nameChosen) {
            System.out.println("Choose your username:");
            System.out.print(">");
            username = input.nextLine();
            System.out.println("You username choice is: " + username);
            System.out.println("Are you happy with your choice? [y/n] ");
            System.out.print(">");

            if (input.nextLine().equalsIgnoreCase("y"))
                nameChosen = true;
        }
        return username;
    }


    /**
     * Ask the connection type.
     * @return type of connection
     */
    private ConnectionType askConnectionType(){
        System.out.println("Please choose your connection type.\nType SOCKET or RMI to confirm your choice.");
        System.out.print(">");
        return ConnectionType.valueOf(input.nextLine().toUpperCase());
    }


    /**
     * Ask the server IP address.
     * @return selected IP address.
     */
    private String askIpAddress(){
        System.out.println("Insert the IP Address of the server");
        System.out.print(">");
        return input.nextLine();
    }


    /**
     * Ask the server port.
     * @return selected port
     */
    private int askPort(){
        System.out.println("Insert the port number of the server, it should be a number between 1024 and 65565");
        System.out.print(">");
        return input.nextInt();
    }


    /**
     * Connect to the server
     */
    private void connect(){
        /*
        Set port, IP address, username.
         */
        ConnectionType connectionType = ConnectionType.SOCKET;   // askConnectionType();
        String ipAddress = "127.0.0.1";    //askIpAddress();
        int numOfPort = 2345;    //askPort();
        String username = askUsername();

        /*
        Model view handler
         */
        modelView.setUsername(username);

        /*
        Start connections, based on the user answer (RMI or socket).
         */
        try{
            connectToServer(connectionType, ipAddress, numOfPort, username);
            //Client.LOGGER.log(Level.INFO, "Client successfully connected");
        }catch (RemoteException | NotBoundException e){
            Client.LOGGER.log(Level.SEVERE, "Failed to start client-server connection: ", e);
            System.exit(-1);
        }
    }


    /**
     * Set unique ID generated by the server.
     * @param a
     */
    private void connectionOutcome(ConnectionOutcome a){
        System.out.println(a.getAnswer());
        client.setID(a.getID());
    }


    /**
     * Server asks for total number of players
     * @param s
     */
     private void howManyPlayerRequest(String s){
         System.out.println(s);
         modelView.setIsYourTurn(true);
         // TODO: qui viene settato a true ma non viene mai messo a FALSE. Bisogna gestire questo, per evitare che il client mandi messaggi al server
     }


    /**
     * Update turn
     * @param yourTurn
     */
    private void updateTurn(Boolean yourTurn) {
        if(yourTurn){
            System.out.println("\nIt's now your turn!");
        }
        else
            System.out.println("\nWait for your next turn now!");
        modelView.setIsYourTurn(yourTurn);

        if(yourTurn)
            System.out.print(">");
    }


    /**
     * Method that prints the messages for the initial phase of a player's turn. It also asks him to place his tiles.
     * @param request
     */
    private void initialPhaseOfTheTurn(String request){
        modelView.setIsYourTurn(true);


        System.out.println("\n\nHere is your Bookshelf:\n");
        modelView.getGame().getCurrentPlayer().getBookShelf().printBookShelf();

        System.out.println("\n\nAnd here is the game board:\n");

        modelView.getGame().getBoard().printBoard();
        System.out.println("\n");

        printMAN();
        System.out.println(request + "\n>");
    }


    private void printPersonalGoalCard(){
        //print the card
    }


    private void printCommonGoalCard(){
        //print the card

    }


    public void requestWhereToPlaceTiles(String request){

        modelView.getGame().getCurrentPlayer().getBookShelf().printBookShelf();
        System.out.println("\n");
        printMAN();

        System.out.println("\n" + request + "\n");

    }


    private void tilesPlaced(String string) {
        System.out.println(string);

        System.out.println("\n\nHere is your new Bookshelf:\n");
        modelView.getGame().getCurrentPlayer().getBookShelf().printBookShelf();
    }


    public void playerNumberChosen(String s){
        System.out.println(s);

        updateTurn(false);
    }

    /**
     * Message shown when a game ends.
     */
    public void endGameMessage() {
        System.out.println("Thanks for playing MyShelfie! Shutting down...");
        System.exit(0);
    }


    /**
     * Method used to print a personalized answer sent by the server.
     * @param answer
     */
    private void customAnswer(String answer){
        System.out.println(answer);
    }


    /**
     * Method used to print the MAN.
     */
    public void printMAN(){
        System.out.println(BLUE_BOLD_COLOR + "\nType MAN to know all the valid commands\n" + RESET_COLOR);
    }

    public void wrongNum(String s){
        howManyPlayerRequest(s);
    }


    public void propertyChange(PropertyChangeEvent event){
        switch (event.getPropertyName()){
            case "ConnectionOutcome" -> connectionOutcome((ConnectionOutcome) event.getNewValue());
            case "HowManyPlayersRequest" -> howManyPlayerRequest((String) event.getNewValue());
            case "UpdateTurn" -> updateTurn((Boolean) event.getNewValue());
            case "CustomAnswer" -> customAnswer((String) event.getNewValue());
            case "RequestWhatToDo" -> initialPhaseOfTheTurn((String) event.getNewValue());
            case "RequestToPlaceTiles" -> requestWhereToPlaceTiles((String) event.getNewValue());
            case "WrongNum" -> wrongNum((String) event.getNewValue());
            case "BookShelfFilledWithTiles" -> tilesPlaced((String) event.getNewValue());
            case "ItsYourTurn" -> updateTurn(true);
            case "EndOfYourTurn" -> updateTurn(false);
            case "PlayerNumberChosen" -> playerNumberChosen((String) event.getNewValue());

        }
    }

}
