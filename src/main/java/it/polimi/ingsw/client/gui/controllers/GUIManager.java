package it.polimi.ingsw.client.gui.controllers;

import it.polimi.ingsw.client.ActionHandler;
import it.polimi.ingsw.client.ModelView;
import it.polimi.ingsw.client.common.UI;
import it.polimi.ingsw.client.gui.GUI;
import it.polimi.ingsw.communications.serveranswers.ConnectionOutcome;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeSupport;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUIManager extends UI {

    private GUI gui;
    private static final String MAIN_GUI = "mainScene.fxml";
    private static final String LOADER = "loadingScene.fxml";
    private static final String GOALS = "goalCardScene.fxml";
    private static final String SETUP = "joinScene.fxml";
    private static final String CHAT = "chatScene.fxml";
    private final Logger logger = Logger.getLogger(getClass().getName());
    private final HashMap<String, Scene> nameMapScene = new HashMap<>();
    /**
     * Maps each scene controller's name to the effective controller object, in order to get the correct controller
     * for modifying operations.
     *
     * @see it.polimi.ingsw.client.gui.controllers for more details.
     */
    private final HashMap<String, GUIController> nameMapController = new HashMap<>();
    /**
     * GUIManager constructor.
     */
    public GUIManager(GUI gui) {
        this.pcsDispatcher = new PropertyChangeSupport(this);
        this.gui = gui;
        this.modelView = new ModelView(gui);
        this.actionHandler = new ActionHandler(gui, gui.getModelView());
        setActiveGame(true);
    }
    public void firePC(String s, Object o1, Object o2){
        this.pcsDispatcher.firePropertyChange(s,o1,o2);
    }
    public void setup() {
        List<String> fxmList = new ArrayList<>(Arrays.asList(SETUP,LOADER, MAIN_GUI, GOALS, CHAT));
        try {
            for (String path : fxmList) {
                FXMLLoader loader = new FXMLLoader(GUI.class.getResource("/fxml/" + path));
                nameMapScene.put(path, new Scene(loader.load()));
                GUIController controller = loader.getController();
                controller.setGuiManger(this);
                nameMapController.put(path, controller);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, e.getMessage(), e);
        }
        gui.setCurrentScene(nameMapScene.get(SETUP));
    }

    public void changeStage(String newScene){
        gui.setCurrentScene(nameMapScene.get(newScene));
        gui.getStage().setScene(gui.getCurrentScene());
        gui.getStage().show();
    }

    public ModelView getModelView(){
        return this.modelView;
    }

    /**
            * Set unique ID generated by the server.
     * @param a
     */
    private void howManyPlayerRequest(String s){
        changeStage(LOADER);
        LoadingController loadingController = (LoadingController) gui.getControllerFromName(LOADER);
        loadingController.setMessage(s);
        /*client.setID(a.getID());*/
    }

    private void connectionOutcome(ConnectionOutcome a){
        changeStage(LOADER);
        LoadingController loadingController = (LoadingController) gui.getControllerFromName(LOADER);
        loadingController.setMessage(a.getAnswer().toString());
        client.setID(a.getID());
    }
    public void propertyChange(PropertyChangeEvent event){
       switch (event.getPropertyName()){
            case "ConnectionOutcome" -> connectionOutcome((ConnectionOutcome) event.getNewValue());
            case "HowManyPlayersRequest" -> howManyPlayerRequest((String) event.getNewValue());
            /*case "CustomAnswer" -> customAnswer((String) event.getNewValue());
            case "WrongNum" -> wrongNum((String) event.getNewValue());
            case "PlayerNumberChosen" -> playerNumberChosen((String) event.getNewValue());*/

        }
    }
}
